#!/usr/bin/env python3

from datetime import datetime
import os


def main():
    outfiles = ["api/gitlab.py"]
    tmpfile = "api/gitlab.py.tmp"

    code_files = []
    code_files.append("gitalma/cli.py")
    code_files.append("gitalma/api_gh.py")
    code_files.append("gitalma/api_gl.py")
    code_files.append("gitalma/git.py")
    code_files.append("gitalma/github.py")
    code_files.append("gitalma/gitlab.py")
    code_files.append("gitalma/init.py")
    code_files.append("gitalma/scratch.py")
    code_files.append("gitalma/versions.py")

    # get the current version in the toml
    version = ""
    with open("pyproject.toml") as fr:
        lines = fr.readlines()
        for line in lines:
            if "version" in line:
                version = line.split("=")[-1].strip().replace('"',"")
                print(version)    
    header = []
    imports = []
    discarded = []
    code = []
    main = []
    # Add header code
    header.append("#!/usr/bin/env python3")    
    header.append("##########################################")
    header.append("# This file is generated by gitlab_maker.py")
    header.append("# Do not edit this file manually!")
    header.append("# The repo that this is generated from is found at:")
    header.append("# https://github.com/ICR-RSE-Group/gitalma")
    header.append("# Generated on: {}".format(datetime.now().strftime("%Y-%m-%d")))
    header.append("# Version = {}".format(version))
    header.append("##########################################")
    # Add main function    
    main.append("\n##########################################\n")    
    main.append('if __name__ == "__main__":')
    main.append('    import sys')
    main.append('    # --------------------------------------------')
    main.append('    # Temporarily do a pat change before running the command')
    main.append('    current_dir = os.getcwd().lower()')
    #main.append('    if "/data/scratch/" not in current_dir:')
    main.append('    tmp_sys_arg = []')
    main.append('    for arg in sys.argv:')
    main.append('        tmp_sys_arg.append(arg)')
    main.append('    sys.argv = sys.argv[:1] + ["change", "-protocol","pat"]')
    main.append('    main()')
    main.append('    sys.argv = tmp_sys_arg')
    main.append('    # --------------------------------------------')            
    main.append('    if len(sys.argv) == 1:')
    main.append('        sys.argv.append("update")')
    main.append('    elif sys.argv[1] == "--status":')
    main.append('        sys.argv[1] = "status"')
    main.append('    main()')
    main.append("\n##########################################\n")

    for cf in code_files:
        code.append(("##########################################"))        
        lines = []
        with open(cf) as fr:
            lines = fr.readlines()
        for line in lines:
            line = line.rstrip()
            if len(line) > 5 and line[:6] == "import":
                if line not in imports:
                    imports.append(line)
            elif len(line) > 5 and line[:5] == "from ":
                if "from ." in line:
                    discarded.append(line)
                else:
                    imports.append(line)
            else:
                code.append(line)

    imports = list(set(imports))
    imports.sort()
        
    # write the code and headrers to file
    with open(tmpfile, "w") as fw:
        # Add header
        for line in header:
            fw.write(line + "\n")
        # Add imports
        for line in imports:
            fw.write(line + "\n")
        # Add code
        for line in code:
            if 'LVERSION = ""' in line:
                # replace from = onwards
                line = f"{line.split('=')[0]} = '{version}'"
            fw.write(line + "\n")
        # Add main function
        for line in main:
            fw.write(line + "\n") 
    # compare the tmpfile with the outfile    
    with open(tmpfile, "r") as fr:
        tmpfile_content = fr.read()
    for outfile in outfiles:
        outfile_content = ""
        if os.path.exists(outfile):
            with open(outfile, "r") as fr:
                outfile_content = fr.read()
        if outfile_content != tmpfile_content:
            print("The files are different, updating the outfile")
            with open(outfile, "w") as fw:
                fw.write(tmpfile_content)
        else:
            print("The files are the same")
    # remove the tmpfile
    if os.path.exists(tmpfile):
        os.remove(tmpfile)


# run the gitlab_maker.py script if called from the command line
##############################################################
if __name__ == "__main__":
    import sys
    # calling the main function
    if len(sys.argv) == 1:
        sys.argv.append("update")        
    main()
